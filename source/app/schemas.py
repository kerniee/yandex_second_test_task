# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-03-11T13:33:03+00:00

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel as PydanticBaseModel
from pydantic import Field, validator

from app.utils import unpack_time, str_to_time


class BaseModel(PydanticBaseModel):
    class Config:
        extra = "forbid"


class CourierType(Enum):
    # _ignore = ["_tbl"]
    # _tbl = {}

    foot = 'foot'
    bike = 'bike'
    car = 'car'

    def carry_cap(self):
        return self._tbl[self]

    def earning_coef(self):
        return self._tbl2[self]


CourierType._tbl = {
    CourierType.foot: 10,
    CourierType.bike: 15,
    CourierType.car: 50,
}

CourierType._tbl2 = {
    CourierType.foot: 2,
    CourierType.bike: 5,
    CourierType.car: 9,
}


def check_range_time(time_s: List[str]):
    unpack_time(time_s)


def check_full_time(time_s: str):
    str_to_time(time_s)


class CourierItem(BaseModel):
    courier_id: int
    courier_type: CourierType
    regions: List[int]
    working_hours: List[str]

    @validator("working_hours")
    def format_check(cls, v):
        check_range_time(v)
        return v

    class Config:
        orm_mode = True


class Courier(BaseModel):
    id: int


class CouriersIds(BaseModel):
    couriers: List[Courier]


class CourierGetResponse(BaseModel):
    courier_id: int
    courier_type: CourierType
    regions: List[int]
    working_hours: List[str]
    rating: Optional[float]
    earnings: int

    @validator("working_hours")
    def format_check(cls, v):
        check_range_time(v)
        return v

    class Config:
        orm_mode = True


class CourierUpdateRequest(BaseModel):
    courier_type: Optional[CourierType] = None
    regions: Optional[List[int]] = None
    working_hours: Optional[List[str]] = None


class OrderItem(BaseModel):
    order_id: int
    weight: float
    region: int
    delivery_hours: List[str]

    class Config:
        orm_mode = True

    @validator("delivery_hours")
    def format_check(cls, v):
        check_range_time(v)
        return v

    @validator('weight')
    def weight_must_be_in_range(cls, v):
        if v < 0.01 or v > 50:
            raise ValueError('weight must be from 0.01 to 50')
        return v


class Order(BaseModel):
    id: int


class OrdersIds(BaseModel):
    orders: List[Order]


class AssignTime(BaseModel):
    assign_time: Optional[str] = Field(None, example='2021-01-10T09:32:14.42Z')

    @validator('assign_time')
    def format_check(cls, v):
        check_full_time(v)
        return v


class OrdersAssignPostRequest(BaseModel):
    courier_id: int


class OrdersCompletePostRequest(BaseModel):
    courier_id: int
    order_id: int
    complete_time: str = Field(..., example='2021-01-10T10:33:01.42Z')

    @validator('complete_time')
    def format_check(cls, v):
        check_full_time(v)
        return v


class OrdersCompletePostResponse(BaseModel):
    order_id: int


class CouriersPostRequest(BaseModel):
    data: List[CourierItem]


class OrdersPostRequest(BaseModel):
    data: List[OrderItem]
